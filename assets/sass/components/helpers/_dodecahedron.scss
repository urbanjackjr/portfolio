$side-length: 20vw;

$side-lengths: ("large": 40vw,
	"max": 20vw,
);

.dodecahedron-wrapper {
	padding: 0 1.5rem;
	overflow: hidden;

	@each $width,
	$side in $side-lengths {
		@include respond-to($width) {
			width: calc($side * 1.92 + 3rem);
		}
	}
}

.dodecahedron {
	position: relative;
	transform-style: preserve-3d;
	transform-origin: 50% 50%;
	perspective: 625rem;
	animation: rotate 20s infinite linear;
	animation-delay: 10ms;

	// Media Queries Loop
	@each $width,
	$side in $side-lengths {
		@include respond-to($width) {
			width: $side;
			height: calc($side * 2.23);
			transform: translateX(calc($side * .47));

			@keyframes rotate {
				from {
					transform: translateX(calc($side * .46)) rotateX(0deg) rotateY(360deg) rotateZ(360deg);
				}

				to {
					transform: translateX(calc($side * .46)) rotateX(360deg) rotateY(0deg) rotateZ(-360deg);
				}
			}
		}
	}

	&__side {
		position: absolute;
		opacity: 0.8;
		height: auto;
		transform-origin: bottom;

		@each $width,
		$side in $side-lengths {
			@include respond-to($width) {
				width: $side;

				@for $i from 1 through 5 {
					&:nth-of-type(#{$i}) {
						transform: rotateY(#{calc($i * 1 / 5)}turn) rotateX(26.565deg) translateZ(calc(-#{$side} * 0.155)) translateY(-50%);
						bottom: 0;
					}

					&:nth-of-type(#{$i+5}) {
						transform: rotateY(#{calc($i * 1 / 5)}turn) rotateX(206.565deg) translateZ(calc(-#{$side} * 0.675)) translateY(50%);
					}
				}

				&:nth-of-type(11) {
					transform-origin: center center;
					transform: translateY(calc(#{$side} * 1.212)) rotateX(90deg) rotateZ(36deg);
				}

				&:nth-of-type(12) {
					transform-origin: center center;
					transform: translateY(calc(-#{$side} * 1.335)) rotateX(-90deg) rotateZ(36deg);
					bottom: 0;
				}
			}
		}
	}

	&__icon {
		z-index: 1;
		position: absolute;
		transform-origin: center center;
		color: white;
		display: block;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%) scaleY(-1);
		max-width: 5rem;
		width: 100%;
		text-align: center;
		display: flex;
		flex-direction: column;
		align-items: center;

		@each $width,
		$side in $side-lengths {
			@include respond-to($width) {
				max-width: $side * 0.35;
			}
		}
	}

	&__svg {
		color: var(--foreground);
		margin-bottom: 1rem;
	}
}